#!/bin/bash -e
rm -f /tmp/containerstarted

/usr/local/bin/ipa-cert-install

if [ ! -f /tmp/enrolled ];
then
	echo "Enrolling into IPA..."
	ipa-client-install \
		--server=ipa.noggindev.test \
		--domain=noggindev.test \
		--realm=NOGGINDEV.TEST \
		--force-join \
		--principal=admin \
		-w noggindev \
		--no-ssh \
		--no-sshd \
		--no-sudo \
		--no-dns-sshfp \
		--unattended \
		--no-nisdomain \
		--no-ntp
	
	touch /tmp/enrolled
fi
	
echo "Getting krb5 ticket..."
echo "noggindev" | kinit admin@NOGGINDEV.TEST


CERTSWAITING=()


function createkeytab() {
	hostname=$1
	service=$2
	location=$3

	echo "Creating keytab for $service/$hostname..."

	echo "Creating $hostname host entry..."
	ipa host-add \
		$hostname.noggindev.test \
		--force || echo "Probably already existed"

	echo "Creating $service/$hostname service entry..."
	ipa service-add \
		$service/$hostname.noggindev.test \
		--force || echo "Probably already existed"

	echo "Creating keytab for $service/$hostname..."
	ipa-getkeytab \
		--keytab $location \
		--principal $service/$hostname.noggindev.test
}


function requestcert() {
	name=$1
	hostname=$2
	location=$3

	echo "Requesting cert for $hostname as $name..."

	echo "Creating $hostname host entry..."
	ipa host-add \
		$hostname.noggindev.test \
		--force || echo "Probably already existed"

	echo "Creating HTTP/$hostname service..."
	ipa service-add \
		HTTP/$hostname.noggindev.test \
		--force || echo "Probably already existed"

	echo "Granting us permissions to request HTTP/$hostname cert..."
	ipa service-add-host \
		HTTP/$hostname.noggindev.test \
		--hosts=util.noggindev.test || echo "Probably already existed"

	echo "Requesting HTTP/$hostname certificate..."
	ipa-getcert request \
		-k ${location}.key \
		-f ${location}.pem \
		-I $name \
		-K HTTP/$hostname.noggindev.test \
		-N "CN=$hostname.noggindev.test,O=noggindev" \
		-D $hostname.noggindev.test
}


if [ ! -f /data/ipsilon/ipa-done ];
then
	requestcert "ipsiloncert" "ipsilon" "/data/ipsilon/httpcert"
	CERTSWAITING+=('/data/ipsilon/httpcert.pem')
fi

if [ ! -f /data/caiapi-noggin/ipa-done ];
then
	createkeytab "caiapi" "CAIAPI" "/data/caiapi-noggin/caiapikeytab"
	requestcert "caiapicert" "caiapi" "/data/caiapi-noggin/caiapicert"
	requestcert "noggincert" "noggin" "/data/caiapi-noggin/noggincert"
	CERTSWAITING+=('/data/caiapi-noggin/caiapicert.pem')
	CERTSWAITING+=('/data/caiapi-noggin/noggincert.pem')
fi

function register_oidc() {
	apphost="$1"
	out_file="$2"

	oidc-register \
		https://ipsilon.noggindev.test/openidc/ \
		https://${apphost}.noggindev.test/ \
		--token-introspection-uri https://ipsilon.noggindev.test/openidc/TokenInfo \
		--output-file $out_file
}

if [ ${#CERTSWAITING[@]} -eq 0 ]; then
	echo "No certs to wait for"
else
	echo "Waiting for certificate creations..."
	echo "Certs: ${CERTSWAITING[*]}"

	echo "Starting certmonger..."
	dbus-run-session certmonger -snd 1 &
	sleep 1

	while true;
	do
		echo "Waiting for certs to be issued..."
		for certpath in ${CERTSWAITING[*]};
		do
			if [ ! -f $certpath ];
			then
				echo "Missing: $certpath"
				sleep 5
				continue 2
			fi
		done
		break
	done

	echo "All certs created, killing certmonger..."
	killall certmonger
fi

echo "Marking certificates as ready..."
touch /data/ipsilon/ipa-done
touch /data/caiapi-noggin/ipa-done

echo "Waiting for Ipsilon to come up..."
until (curl -qf http://ipsilon.noggindev.test/ >dev/null 2>&1)
do
	echo "Waiting for Ipsilon to start..."
	sleep 10
done

if [ ! -f /data/caiapi-noggin/oidc-done ];
then
	echo "Registering caiapi/noggin..."
	register_oidc "caiapi" "/data/caiapi-noggin/oidc-caiapi.json"
	register_oidc "noggin" "/data/caiapi-noggin/oidc-noggin.json"
fi

if [ ! -f /data/caiapi-noggin/caiclient_done ];
then
	echo "Performing manual registrations..."
	/usr/local/bin/manual_reg "https://ipsilon.noggindev.test/openidc/" "/data/caiapi-noggin/caiclient_client.json" "http://localhost:12345/" "http://localhost:23456/"
fi

echo "Marking all parts are ready..."
touch /data/caiapi-noggin/oidc-done
touch /tmp/containerstarted

echo "Setting up VNC..."
printf 'noggindev\nnoggindev\nn\n' | vncpasswd

echo "Utility container setup done!"

echo "Stayin' alive..."
rm -rf /tmp/.X*
exec vncserver -fg
